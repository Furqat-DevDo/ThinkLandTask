using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace ThinkLand.Services
{
    public class JwtService
    {
        private readonly ILogger<JwtService> _logger;
        private readonly JwtOptions _options;

        public JwtService(
            IOptionsMonitor<JwtOptions> options,
            ILogger<JwtService> logger)
        {
            _logger = logger;
            _options = options.CurrentValue;
        }

        public string GenerateToken(string userName, string role)
        {
            var secret = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_options.IssuerSigningKey));

            var authClaims = new[]
                {
                new Claim(ClaimTypes.NameIdentifier, userName),
                new Claim("role", role)
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(authClaims),
                Expires = DateTime.UtcNow.AddDays(7),
                Issuer = _options.ValidIssuer,
                Audience = _options.ValidAudience,
                SigningCredentials = new SigningCredentials(secret, SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }

        public bool IsValidToken(string token)
        {
            var secret = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_options.IssuerSigningKey));
            var tokenHandler = new JwtSecurityTokenHandler();
            try
            {
                var result = tokenHandler.ValidateToken(token, new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = secret
                }, out SecurityToken validatedToken);
            }
            catch
            {
                return false;
            }

            return true;
        }

        public string GetClaim(string token)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var securityToken = tokenHandler.ReadToken(token) as JwtSecurityToken;
            return securityToken.Claims.FirstOrDefault().Value;
        }
    }

}
//app.MapPost("/security/getToken", [AllowAnonymous] (UserDto user) =>
//{

//    if (user.UserName == "admin@mohamadlawand.com" && user.Password == "P@ssword")
//    {
//        var issuer = builder.Configuration["Jwt:Issuer"];
//        var audience = builder.Configuration["Jwt:Audience"];
//        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]));
//        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

//        // Now its ime to define the jwt token which will be responsible of creating our tokens
//        var jwtTokenHandler = new JwtSecurityTokenHandler();

//        // We get our secret from the appsettings
//        var key = Encoding.ASCII.GetBytes(builder.Configuration["Jwt:Key"]);

//        // we define our token descriptor
//        // We need to utilise claims which are properties in our token which gives information about the token
//        // which belong to the specific user who it belongs to
//        // so it could contain their id, name, email the good part is that these information
//        // are generated by our server and identity framework which is valid and trusted
//        var tokenDescriptor = new SecurityTokenDescriptor
//        {
//            Subject = new ClaimsIdentity(new[]
//            {
//                new Claim("Id", "1"),
//                new Claim(JwtRegisteredClaimNames.Sub, user.UserName),
//                new Claim(JwtRegisteredClaimNames.Email, user.UserName),
//                // the JTI is used for our refresh token which we will be convering in the next video
//                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
//            }),
//            // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
//            // but since this is a demo app we can extend it to fit our current need
//            Expires = DateTime.UtcNow.AddHours(6),
//            Audience = audience,
//            Issuer = issuer,
//            // here we are adding the encryption alogorithim information which will be used to decrypt our token
//            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
//        };

//        var token = jwtTokenHandler.CreateToken(tokenDescriptor);

//        var jwtToken = jwtTokenHandler.WriteToken(token);

//        return Results.Ok(jwtToken);
//    }
//    else
//    {
//        return Results.Unauthorized();
//    }
//})

